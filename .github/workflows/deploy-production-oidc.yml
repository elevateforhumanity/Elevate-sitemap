name: Deploy to Production (OIDC)

on:
  push:
    branches:
      - main
  workflow_dispatch:

# OIDC permissions for secure deployments without long-lived secrets
permissions:
  id-token: write   # Required for OIDC token
  contents: read    # Required to checkout code
  deployments: write # Required to create deployments

jobs:
  deploy-durable:
    name: Deploy Frontend to Durable
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://elevateforhumanity.org
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NODE_ENV: production
          VITE_API_URL: https://api.elevateforhumanity.org
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_STRIPE_PUBLIC_KEY: ${{ secrets.VITE_STRIPE_PUBLIC_KEY }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
      
      - name: Deploy to Durable
        run: |
          # Durable deployment via their API or CLI
          # Note: Adjust based on Durable's actual deployment method
          curl -X POST https://api.durable.co/v1/sites/${{ secrets.DURABLE_SITE_ID }}/deploy \
            -H "Authorization: Bearer ${{ secrets.DURABLE_API_KEY }}" \
            -F "files=@frontend/dist"
      
      - name: Verify deployment
        run: |
          sleep 10
          curl -f https://elevateforhumanity.org || exit 1
  
  deploy-cloudflare:
    name: Deploy to Cloudflare Workers
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://workers.elevateforhumanity.org
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Deploy to Cloudflare Workers (OIDC)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production
          # OIDC authentication - no need for long-lived secrets
          workingDirectory: ./workers
      
      - name: Create deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: '${{ job.status }}',
              environment_url: 'https://elevateforhumanity.org',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });
  
  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.elevateforhumanity.org
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy Backend to Railway
        run: |
          cd backend
          railway up --service backend-api
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Wait for deployment
        run: sleep 30
      
      - name: Health check
        run: |
          curl -f https://api.elevateforhumanity.org/api/health || exit 1
  
  deploy-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    environment:
      name: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd backend
          npm ci
      
      - name: Run Prisma migrations
        run: |
          cd backend
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Apply RLS policies
        run: |
          cd backend
          psql $DATABASE_URL -f ../prisma/migrations/enable_rls.sql
          psql $DATABASE_URL -f ../prisma/migrations/add_stripe_events.sql
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
  
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-durable, deploy-cloudflare, deploy-railway, deploy-database]
    if: always()
    
    steps:
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Deployment to production ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment Status:* ${{ job.status }}\n*Environment:* Production\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚ùå Production Deployment Failed"
          to: ${{ secrets.ALERT_EMAIL }}
          from: GitHub Actions
          body: |
            Production deployment failed!
            
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            View logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
